#include "contiki.h"

#include "window.h"
#include <stdio.h>
#include <string.h>
#include "icons.h"
#include "grlib/grlib.h"
#include "cordic.h"
#include "memlcd.h"
#include "memory.h"


#define CENTER_X 71
#define CENTER_Y 84
static int azimuthangle = 0;	//For Test
//For Test
int Compass_get_angle()
{
	return azimuthangle;
}

static void onDraw(tContext *pContext)
{
	int  azimuth_angle, width, angle;
	char buf[20];	                

  	int cos_val, sin_val;
  	int x, y;

	  		
	azimuth_angle = Compass_get_angle();
	GrContextForegroundSet(pContext, ClrBlack);
    	GrRectFill(pContext, &fullscreen_clip);
    	
	GrContextForegroundSet(pContext, ClrWhite);
	//draw a Circle
	GrCircleDraw(pContext, CENTER_X, CENTER_Y, 66);
	
	GrCircleFill(pContext, CENTER_X, CENTER_Y, 32);
	
	
	cordic_sincos(azimuth_angle, 13, &sin_val, &cos_val);
	x = CENTER_X + cordic_multipy(sin_val, 38);
  	y = CENTER_Y - cordic_multipy(cos_val, 38);	
//  	GrLineDraw(pContext, CENTER_X, CENTER_Y,  x, y);
	GrLineFill(pContext, CENTER_X, CENTER_Y,  x, y, 3);
	
	GrContextForegroundSet(pContext, ClrBlack);
	GrCircleFill(pContext, CENTER_X, CENTER_Y, 28);
	
	GrContextForegroundSet(pContext, ClrWhite);
	GrTriagleFill(pContext, 65, 19, 78, 19, 71, 26);

	GrContextForegroundSet(pContext, ClrWhite);	
	
	GrContextFontSet(pContext, &g_sFontRonda12);	
	if((azimuth_angle<23) || (azimuth_angle>337) )
	{
		//N
		buf[0] = 'N';
		buf[1] = 0;		
	}	
	else if((azimuth_angle<68) && (azimuth_angle>22) )
	{
		//NE
		buf[0] = 'N';
		buf[1] = 'E';
	}	
	else if((azimuth_angle<113) && (azimuth_angle>67) )
	{
		//E
		buf[0] = 'E';		
		buf[1] = 0;		
	}	
	else if((azimuth_angle<158) && (azimuth_angle>112) )
	{
		//SE
		buf[0] = 'S';
		buf[1] = 'E';		
	}	
	else if((azimuth_angle<203) && (azimuth_angle>157) )
	{
		//S
		buf[0] = 'S';
		buf[1] = 0;		
				
	}	
	else if((azimuth_angle<248) && (azimuth_angle>202) )
	{
		//SW
		buf[0] = 'S';
		buf[1] = 'W';		
	}	
	else if((azimuth_angle<293) && (azimuth_angle>247) )
	{
		//W
		buf[0] = 'W';						
		buf[1] = 0;		
	}	
	else if((azimuth_angle<338) && (azimuth_angle>292) )
	{
		//NW
		buf[0] = 'N';
		buf[1] = 'W';		
	}			
	GrStringDrawCentered(pContext, buf, -1, CENTER_X, CENTER_Y -6 , 0);    		
	buf[0] = 0;
	buf[1] = 0;			
	
	GrContextFontSet(pContext, &g_sFontRonda12);	
	sprintf(buf, "%d", azimuth_angle);		
	width = GrStringWidthGet(pContext, buf, -1);
	GrStringDrawCentered(pContext, buf, -1, CENTER_X , CENTER_Y +10 , 0);    		
	
	GrLineDrawV(pContext, CENTER_X + (width/2) + 5, 90, 92);
	GrLineDrawH(pContext, CENTER_X + (width/2) + 4, CENTER_X + (width/2) + 6 , 91);

	
}

uint8_t compass_process(uint8_t ev, uint16_t lparam, void* rparam)
{
	switch(ev)
	{
	case EVENT_WINDOW_CREATED:
		//Enable BOCHE BMC050L Compass	
		//Enable_Compass(true);
		break;
			
	case EVENT_WINDOW_PAINT:			
    		onDraw((tContext*)rparam);			
		break;
			
	case EVENT_KEY_PRESSED:
		if (lparam == KEY_EXIT)
		{
			//Disable BOCHE BMC050L Compass
			//Enable_Compass(false);
			window_close();
			return 1;
		}
		else if (lparam == KEY_UP)
		{
			if(azimuthangle <350)
				azimuthangle +=10;
			else
				azimuthangle -=350;	
		}	
		else if (lparam == KEY_DOWN)
		{
			if(azimuthangle >0 )
				azimuthangle--;
			else
				azimuthangle =359;				
		}	
		window_invalid(NULL);
		break;		

  	default:
    		return 0;				
	}
	return 1;
}